(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{227:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(8),o=(n(0),n(735)),i={title:"Create user / wallet"},s={unversionedId:"guides/create_wallet",id:"guides/create_wallet",isDocsHomePage:!1,title:"Create user / wallet",description:"To be able to interact with the trustlines protocol a user, i.e. wallet, is needed.",source:"@site/clientlib/guides/create_wallet.md",slug:"/guides/create_wallet",permalink:"/clientlib/next/guides/create_wallet",editUrl:"https://github.com/trustlines-protocol/tl-dev-docs/edit/master/clientlib/guides/create_wallet.md",version:"current",sidebar:"clientlib",previous:{title:"Introduction",permalink:"/clientlib/next/guides/intro"},next:{title:"Discover currency networks",permalink:"/clientlib/next/guides/discover_networks"}},c=[{value:"Create instance of type <code>safe</code>",id:"create-instance-of-type-safe",children:[]},{value:"Create instance of type <code>ethers</code>",id:"create-instance-of-type-ethers",children:[]},{value:"Create instance of type <code>identity</code>",id:"create-instance-of-type-identity",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To be able to interact with the trustlines protocol a user, i.e. wallet, is needed.\nYou therefore have to create an instance and load it into the library.\nThe wallet manages your key pair and is used for cryptographically signing transactions, thus enabling the establishment\nof trustlines and transfers.\nDepending on the initial configuration of the ",Object(o.b)("inlineCode",{parentName:"p"},"TLNetwork")," instance, you can create either a new instance of\ntype ",Object(o.b)("inlineCode",{parentName:"p"},"ethers")," or type ",Object(o.b)("inlineCode",{parentName:"p"},"identity"),".\nThe former type is based on the wallet object of the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.ethers.io/ethers.js/html/"}),"ethers.js")," library,\nwhereas the second type uses\nan ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/contracts/blob/master/docs/deploy.md#deploy-identity-contracts"}),"identity contract"),"\nto enable meta-transactions."),Object(o.b)("h3",{id:"create-instance-of-type-safe"},"Create instance of type ",Object(o.b)("inlineCode",{parentName:"h3"},"safe")),Object(o.b)("p",null,"A user of type ",Object(o.b)("inlineCode",{parentName:"p"},"safe")," is based on a ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://gnosis-safe.io/"}),"Gnosis Safe")," contract. The Gnosis Safe is a smart contract\nthat acts as your identity on chain. You control it with your private key and we make a use of meta-transactions to pay\nfor the gas costs of your transactions."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'import {WALLET_TYPE_SAFE} from "./TLWallet"\n\nconst gnosis = new TLNetwork({\n  relayUrl: "https://trustlines-relay-gnosis.giveth.io/api/v1",\n  messagingUrl: "https://messaging-gn.trustlines.app/api/v1",\n  walletType: WALLLET_TYPE_SAFE,\n  identityFactoryAddress: "0x1234...",\n  identityImplementationAddress: "0x1234...",\n  gnosisSafeL2Address: "0x3E5c63644E683549055b9Be8653de26E0B4CD36E",\n  gnosisSafeProxyFactoryAddress: "0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2",\n  chainId: 100,\n  safeRelayUrl: "https://trustlines-safe-relay-gnosis.giveth.io/api",\n})\n\nconst newIdentityUser = await gnosis.user.create()\nawait gnosis.user.loadFrom(newIdentityUser)\n\n// Additional step to deploy the identity contract of newly created user\nconst txHash = await gnosis.user.deployIdentity()\n')),Object(o.b)("h3",{id:"create-instance-of-type-ethers"},"Create instance of type ",Object(o.b)("inlineCode",{parentName:"h3"},"ethers")),Object(o.b)("p",null,"Note that a user of type ",Object(o.b)("inlineCode",{parentName:"p"},"ethers")," can not\nuse ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/contracts/blob/master/docs/deploy.md#deploy-identity-contracts"}),"meta-transactions"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'const ethers = new TLNetwork({\n  protocol: "https",\n  wsProtocol: "wss",\n  host: "relay0.testnet.trustlines.network",\n  path: "/api/v1",\n  walletType: "ethers",\n})\n\nconst newEthersUser = await ethers.user.create()\nawait ethers.user.loadFrom(newEthersUser)\n')),Object(o.b)("h3",{id:"create-instance-of-type-identity"},"Create instance of type ",Object(o.b)("inlineCode",{parentName:"h3"},"identity")),Object(o.b)("p",null,"A user of type ",Object(o.b)("inlineCode",{parentName:"p"},"identity")," makes use of meta-transactions.\nTherefore, the addresses of the\ndeployed ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/contracts/blob/master/contracts/identity/IdentityProxyFactory.sol"}),"identity factory"),"\nand ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/contracts/blob/master/contracts/identity/Identity.sol"}),"implementation"),"\ncontracts have to be set.\nAn additional step of deploying the identity contract of the newly created user is also necessary."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'const identity = new TLNetwork({\n  protocol: "https",\n  wsProtocol: "wss",\n  host: "relay0.testnet.trustlines.network",\n  path: "/api/v1",\n  walletType: "identity",\n  identityFactoryAddress: "0x8D2720877Fa796E3C3B91BB91ad6CfcC07Ea249E",\n  identityImplementationAddress: "0x8BEe92893D3ec62e5B3EBBe4e536A60Fd9AFc9D7",\n})\n\nconst newIdentityUser = await identity.user.create()\nawait identity.user.loadFrom(newIdentityUser)\n\n// Additional step to deploy the identity contract of newly created user\nconst txHash = await laika.user.deployIdentity()\n')))}p.isMDXComponent=!0},735:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return y}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,y=d["".concat(i,".").concat(b)]||d[b]||u[b]||o;return n?a.a.createElement(y,s(s({ref:t},l),{},{components:n})):a.a.createElement(y,s({ref:t},l))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);