(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{323:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(8),i=(n(0),n(656)),a={title:"E2E Testing"},c={unversionedId:"testing/e2e",id:"testing/e2e",isDocsHomePage:!1,title:"E2E Testing",description:"We use the Detox library for end-to-end testing.",source:"@site/mobileapp/testing/e2e.md",slug:"/testing/e2e",permalink:"/mobileapp/testing/e2e",editUrl:"https://github.com/trustlines-protocol/tl-dev-docs/edit/master/mobileapp/testing/e2e.md",version:"current",sidebar:"mobileapp",previous:{title:"iOS",permalink:"/mobileapp/known_issues/ios"},next:{title:"Unit Testing",permalink:"/mobileapp/testing/unit"}},l=[{value:"Artifacts",id:"artifacts",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"We use the Detox library for end-to-end testing.\nThe tests are located in the e2e directory and additionally to this we mock some app files. The mocked files\nhave the ",Object(i.b)("inlineCode",{parentName:"p"},".e2e.js")," extension and the metro builder loads them in tests when started with:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"RN_SRC_EXT=e2e.js react-native start\n")),Object(i.b)("p",null,"To run the tests one need first to build the app for testing:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"detox build -c config.name\n")),Object(i.b)("p",null,"The available configs can be found in the ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," file under ",Object(i.b)("inlineCode",{parentName:"p"},"detox.configuration"),".\nThe detox configs in ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," specify the emulators that the test expects to run on, but one can provide\na different emulator by specifying the ",Object(i.b)("inlineCode",{parentName:"p"},"-n EmulatorName")," flag on the command line."),Object(i.b)("p",null,"The develop configs communicates with a local relay server and chain started with the following repo:\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/end2end/"}),"https://github.com/trustlines-protocol/end2end/")),Object(i.b)("p",null,"You need to run the relay server and chain with the following command:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"./run-e2e.sh -b\n")),Object(i.b)("p",null,"our developConfig in src/shared/config/index.e2e.js specifies the relay host with localhost. This works fine on the\niOS simulator, but on the Android Emulator you'll have to do port forwarding in order for your emulator to see your host.\nYou can do:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"adb -s simulator_name reverse tcp:5000 tcp:5000\n")),Object(i.b)("p",null,"For more detox options refer to the detox-cli docs: ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/wix/Detox/blob/master/docs/APIRef.DetoxCLI.md"}),"https://github.com/wix/Detox/blob/master/docs/APIRef.DetoxCLI.md")),Object(i.b)("h1",{id:"circleci"},"CircleCI"),Object(i.b)("p",null,"CircleCI is configured to run our end to end tests on every commit. "),Object(i.b)("p",null,"If you want to configure your own CircleCI instance you need to provide the following environment variables:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"ANDROID_KEYSTORE_DEVELOP_BASE64 \nANDROID_KEYSTORE_RELEASE_BASE64\nCACHE_VERSION\nENV_DEVELOP_BASE64\nENV_E2E_BASE64\nENV_PRODUCTION_BASE64\nENV_STAGING_BASE64\nFASTLANE_ENV_SECRET_BASE64\nFASTLANE_PASSWORD\nFIREBASE_CI_TOKEN\nFIREBASE_SERVICES_FILE_ANDROID_DEVELOP_JSON\nFIREBASE_SERVICES_FILE_ANDROID_PRODUCTION_JSON\nFIREBASE_SERVICES_FILE_ANDROID_STAGING_JSON\nFIREBASE_SERVICES_FILE_IOS_DEVELOP_PLIST\nFIREBASE_SERVICES_FILE_IOS_PRODUCTION_PLIST\nFIREBASE_SERVICES_FILE_IOS_STAGING_PLIST\nGOOGLE_PLAY_STORE_JSON\nMATCH_PASSWORD\nMYAPP_RELEASE_KEY_ALIAS\nMYAPP_RELEASE_KEY_PASSWORD  \nMYAPP_RELEASE_STORE_FILE    \nMYAPP_RELEASE_STORE_PASSWORD\nNOTIFEE_CONFIG_JSON\n")),Object(i.b)("p",null,"Our CircleCI config generates the keystore files out of the base64 environment variables with the following command:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"$ base64 -i path_to_keystore_file -o path_to_outhput_file\n")),Object(i.b)("p",null,"Prefer the base64 command over openssl as for some reason openssl ads a newline in the output and then decoding\nthe base64 text on CircleCI doesn't work."),Object(i.b)("h2",{id:"artifacts"},"Artifacts"),Object(i.b)("p",null,"We record logs, screenshots on before and after test as well as videos on failing tests. Those can be found in the\nartifacts directory."))}p.isMDXComponent=!0},656:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return O}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,O=b["".concat(a,".").concat(d)]||b[d]||u[d]||i;return n?o.a.createElement(O,c(c({ref:t},s),{},{components:n})):o.a.createElement(O,c({ref:t},s))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);