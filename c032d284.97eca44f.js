(window.webpackJsonp=window.webpackJsonp||[]).push([[452],{523:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return u}));var n=a(3),r=a(8),s=(a(0),a(701)),c={title:"State"},o={unversionedId:"customizations/state",id:"customizations/state",isDocsHomePage:!1,title:"State",description:"The Trustlines app uses redux in combination with redux-saga to store data locally. Once data is pulled in our",source:"@site/mobileapp/customizations/state.md",slug:"/customizations/state",permalink:"/mobileapp/customizations/state",editUrl:"https://github.com/trustlines-protocol/tl-dev-docs/edit/master/mobileapp/customizations/state.md",version:"current",sidebar:"mobileapp",previous:{title:"Clientlib",permalink:"/mobileapp/customizations/clientlib"},next:{title:"Storybook",permalink:"/mobileapp/customizations/storybook"}},i=[{value:"Entities",id:"entities",children:[]}],l={rightToc:i};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The Trustlines app uses redux in combination with redux-saga to store data locally. Once data is pulled in our\nstate, it's automatically persisted in AsyncStorage with redux-persist. "),Object(s.b)("p",null,"Every state entity has ist own directory in 'state' that usually containing these files:"),Object(s.b)("p",null,"E.g. 'state/contacts'"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"./actions.js    // redux actions\n./types.js  // flow types for redux-state and entities\n./reducers.js   // redux reducers\n./sagas.js      // redux sagas. Pretty much all of the state calculation happens in here\n./schema.js     // schema for normalizr (normalization / denormalization of state data)\n./select.js     // redux state selectors\n")),Object(s.b)("h3",{id:"entities"},"Entities"),Object(s.b)("p",null,"A state entity that has an external resource as source, e.g. 'contact' which is stored in an internal db, follows a pattern:"),Object(s.b)("h4",{id:"state-object"},"State Object"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"{\n    \n  data: { // a 'data' object, that holds all normalized data, keyed by a unique id / string\n    '0xa1499ad3a013a80701d77e1124b766e4074065fd': {\n        ...\n      }\n  },\n  timestamp: '2017-08-11T06:59:45.412Z' // js timestamp,\n  fetching: false // boolean flag if a data retrieval is on the go\n}\n")),Object(s.b)("h4",{id:"actions-actionsjs"},"Actions (actions.js)"),Object(s.b)("p",null,"Small functions creating actions to enable a streamlined code flow. "),Object(s.b)("h4",{id:"sagas-sagasjs"},"Sagas (sagas.js)"),Object(s.b)("p",null,"Sagas take care of the data ",Object(s.b)("strong",{parentName:"p"},"retrieval management"),", data ",Object(s.b)("strong",{parentName:"p"},"normalization")," and enable side effects in redux."),Object(s.b)("p",null,"see ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/redux-saga/redux-saga"}),"github.com/redux-saga/redux-saga")," or ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://redux-saga.js.org/"}),"redux-saga.js.org")," to get a feeling of what redux-saga is capable of."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript",metastring:'title="state/contacts/sagas.js"',title:'"state/contacts/sagas.js"'}),"// A saga responds to a request action ...\nyield takeEvery(\n  contactsRestActions.get.multi.requested().type,\n  getCachedSaga({ fetchSaga: getContacts, selector: getState, lifespan: 10000 })\n)\n\n// ... starts the data retrival ...\nconst getContacts = function * fetchContacts(action): * {\n  try {\n    const contacts = yield call(contactsDb.getContacts)\n    const normalized = normalize(contacts, [contactSchema])\n    \n    // ... and triggers as redux action with payload\n    yield put(contactsRestActions.get.multi.succeeded({ \n      data: normalized.entities.contacts,  \n    })) \n  } catch (e) {\n    yield put({ \n      ...restActions.get.multi.failed({ message: e.message}), \n      error: true \n    })\n  }\n}\n\n")),Object(s.b)("p",null,"In the example above the saga takes care of the async call. Therefor in response to a ",Object(s.b)("em",{parentName:"p"},"*",".requested")," action ( ",Object(s.b)("em",{parentName:"p"},"takeEvery()")," ) the actual data retrieval method is called ( ",Object(s.b)("em",{parentName:"p"},"call()")," ), the result is normalized and a ",Object(s.b)("em",{parentName:"p"},"*",".succeeded")," action is dispatched that will trigger the reducer to save the result to the state.     "),Object(s.b)("p",null,"As a bonus the dispatch call itself can return a promise, that is resolved once the ",Object(s.b)("em",{parentName:"p"},"*",".succeeded")," action is dispatched.\nTo enable this ",Object(s.b)("em",{parentName:"p"},"redux-saga-thunk")," is used."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const getContacts = function * fetchContacts(action): * {\n  try {\n    const contacts = yield call(contactsDb.getContacts)\n    const normalized = normalize(contacts, [contactSchema])\n    const thunk = _.get(action, 'meta.thunk')\n    \n    // ... and triggers as redux action with payload\n    yield put(contactsRestActions.get.multi.succeeded({ \n      data: normalized.entities.contacts,\n      thunk\n    }))\n    \n    return normalized.entities.contacts\n  } catch (e) {\n    yield put({ \n      ...restActions.get.multi.failed({ message: e.message,thunk }), \n      error: true \n    })\n  }\n}\n\n")),Object(s.b)("h4",{id:"normalization"},"Normalization"),Object(s.b)("p",null,"The states data is normalized with 'normalizr' ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/paularmstrong/normalizr"}),"https://github.com/paularmstrong/normalizr")," to reduce redundancy."),Object(s.b)("h4",{id:"reducer-reducerjs"},"Reducer (reducer.js)"),Object(s.b)("p",null,"The reducer transfer new data into the state"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:'title="state/contacts/actions.js"',title:'"state/contacts/actions.js"'}),"export const reducer = handleActions({\n  [combineActions(...Object.values(restActions.get.multi))](state, { payload, meta }) {\n    return {\n      ...state,\n      timestamp: payload.data ? new Date() : state.timestamp,\n      data: payload.data ? payload.data : state.data,\n      fetching: meta.fetching\n    }\n  }\n})\n")),Object(s.b)("h4",{id:"select-selectjs"},"Select (select.js)"),Object(s.b)("p",null,"To get ( and denormalize ) data from state, use the methods from the corresponding ",Object(s.b)("em",{parentName:"p"},"select.js")),Object(s.b)("h4",{id:"persistence"},"Persistence"),Object(s.b)("p",null,"Parts of the state are persistet via ",Object(s.b)("em",{parentName:"p"},"redux-persist")," to enable a better startup performance of the app."),Object(s.b)("p",null,"There is also a locally running instance of ",Object(s.b)("em",{parentName:"p"},"Pouch DB")," which takes care of data saved only locally e.g. ",Object(s.b)("inlineCode",{parentName:"p"},"contacts")," and ",Object(s.b)("inlineCode",{parentName:"p"},"account")," data . The connection to this local database is treated like am async remote connection to enable other data adapters later."))}u.isMDXComponent=!0},701:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(a),b=n,m=p["".concat(c,".").concat(b)]||p[b]||d[b]||s;return a?r.a.createElement(m,o(o({ref:t},l),{},{components:a})):r.a.createElement(m,o({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,c=new Array(s);c[0]=b;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var l=2;l<s;l++)c[l]=a[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);