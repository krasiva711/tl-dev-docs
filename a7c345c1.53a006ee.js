(window.webpackJsonp=window.webpackJsonp||[]).push([[334],{405:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return p}));var o=n(3),r=n(8),a=(n(0),n(610)),l={layout:"contracts",title:"Trustlines Smart Contract Platform"},c={unversionedId:"contracts_README",id:"contracts_README",isDocsHomePage:!1,title:"Trustlines Smart Contract Platform",description:"This documentation explains how to deploy Trustlines smart contracts,",source:"@site/contracts/contracts_README.md",slug:"/contracts_README",permalink:"/contracts/contracts_README",editUrl:"https://github.com/trustlines-protocol/tl-dev-docs/edit/master/contracts/contracts_README.md",version:"current",sidebar:"Contracts",next:{title:"Trustlines smart contracts deployment",permalink:"/contracts/contracts_deployment"}},i=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Deployment tools",id:"deployment-tools",children:[]},{value:"Development",id:"development",children:[]},{value:"Change log",id:"change-log",children:[]}]}],s={rightToc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This documentation explains how to deploy Trustlines smart contracts,\nfor creating your own currency network and trustlines exchange.\nThe exchange functionality is not fully supported at this point.\nThe current documentation is written for an Ubuntu Linux system."),Object(a.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Python 3.6 or up and dev dependencies"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://pip.pypa.io/en/stable/"}),"pip")),Object(a.b)("li",{parentName:"ul"},"git")),Object(a.b)("p",null,"Run"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"apt install build-essential python3-dev python3-virtualenv virtualenv pkg-config libssl-dev automake autoconf libtool git make\n")),Object(a.b)("p",null,"One of the dependencies used is the secp256k1 library. If you're using\npython 3.5 on linux you can skip the following step, since pypi contains\nbinary packages for secp256k1. If not, you'll have to run the following\nto install the secp256k1 C library:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/bitcoin-core/secp256k1.git\ncd secp256k1\n./autogen.sh\n./configure --enable-module-recovery\nmake\nsudo make install\nsudo ldconfig\n")),Object(a.b)("h3",{id:"deployment-tools"},"Deployment tools"),Object(a.b)("p",null,"This section runs through the tooling necessary for deploying the\ncontracts."),Object(a.b)("h5",{id:"ethereum-client"},"Ethereum client"),Object(a.b)("p",null,"To deploy the Trustlines smart contracts, you need access to an ethereum client,\ne.g. geth or parity, which is synced to the chain you want to use. The\nclient needs to expose the JSON RPC endpoint. Additionally you need an\naccount with enough ether to pay for the contract deployment."),Object(a.b)("h5",{id:"deployment-setup"},"Deployment setup"),Object(a.b)("p",null,"Please run ",Object(a.b)("inlineCode",{parentName:"p"},"pip install trustlines-contracts-deploy")," to install the ",Object(a.b)("inlineCode",{parentName:"p"},"tl-deploy"),"\ntool from PyPI. Solidity itself isn't needed anymore."),Object(a.b)("h5",{id:"tl-deploy"},"tl-deploy"),Object(a.b)("p",null,"The tool ",Object(a.b)("inlineCode",{parentName:"p"},"tl-deploy")," allows you to deploy the relevant contracts."),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"tl-deploy --help")," to find out about the relevant commands or read\nfurther in the ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"contracts_deployment"}),"deploy documentation"),"."),Object(a.b)("h3",{id:"development"},"Development"),Object(a.b)("p",null,"To start developing install the development dependencies into a venv\nwith ",Object(a.b)("inlineCode",{parentName:"p"},"pip install -c constraints.txt -r requirements.txt")),Object(a.b)("p",null,"Download and install the solidity compiler solc into bin for compiling the\ncontracts"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"curl -L -o $HOME/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.8/solc-static-linux && chmod +x $HOME/bin/solc\n")),Object(a.b)("h5",{id:"compiling"},"Compiling"),Object(a.b)("p",null,"The contracts can be compiled with ",Object(a.b)("inlineCode",{parentName:"p"},"make compile"),". This will create a\nfile ",Object(a.b)("inlineCode",{parentName:"p"},"contracts.json")," with all the compiled contracts."),Object(a.b)("h5",{id:"testing"},"Testing"),Object(a.b)("p",null,"For testing we use pytest with an ethereum tester plugin. The tests can\nbe run with ",Object(a.b)("inlineCode",{parentName:"p"},"pytest"),". Please not that this will recompile all contracts\nautomatically, there's no need to call ",Object(a.b)("inlineCode",{parentName:"p"},"make compile")," manually."),Object(a.b)("h5",{id:"installation"},"Installation"),Object(a.b)("p",null,"Please run ",Object(a.b)("inlineCode",{parentName:"p"},"make install")," to install the trustlines-contracts-bin and\ntrustlines-contracts-deploy tool from the git checkout."),Object(a.b)("h3",{id:"change-log"},"Change log"),Object(a.b)("p",null,"See ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/contracts/blob/master/CHANGELOG.rst"}),"CHANGELOG"),"."))}p.isMDXComponent=!0},610:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(l,".").concat(d)]||u[d]||b[d]||a;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<a;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);